import type { MessagePacket, MessageEditPayload, MessagecaptionEditPayload, MessageMediaEditPayload, MessageReplyMarkupEditPayload, ForwardPayload } from '../Client/Managers/MessagesManager';
import type { MessagePayload, Chat, CopyMessagePayload } from '../Types/Message';
import type { MessagesManager } from '../Client/Managers/MessagesManager';
import type { FormDataBuilder } from '../Builders/FormData';
import type { Client } from '../Client/Client';
import type { Topic } from './ForumTopic';
import type { MessageEntity } from '../Types/Common';
import { MessagePayloadMethod } from '../Types/Message';
import { MessageReactions } from './MessageReactions';
import { Reactions } from 'src/Builders/Reactions';
import { BaseClass } from './BaseClass';
import { MessageEntities } from './MessageEntities';
import { User } from './User';
export declare class Message extends BaseClass<Message, MessagePacket> implements Omit<Omit<Partial<MessagePacket>, 'chat'>, 'sender_chat'> {
    message_id: number;
    chat_id: number;
    date: number;
    from: User;
    message_thread_id?: number;
    sender_chat_id?: number;
    text?: string;
    entities?: MessageEntity[];
    message_entities?: MessageEntities;
    reactions: MessageReactions;
    constructor(client: Client, packet: MessagePacket);
    _patch(packet: MessagePacket): this;
    replyText(text: string): Promise<Message | boolean>;
    reply(pointer: MessagePayloadMethod, payload: Partial<MessagePayload>, form_data?: FormDataBuilder): Promise<Message | boolean>;
    delete(): Promise<boolean>;
    forward(chat_id: string | number, payload: ForwardPayload): Promise<boolean>;
    copy(chat_id: string | number, payload: CopyMessagePayload): Promise<boolean>;
    pin(disable_notification?: boolean, business_connection_id?: string): Promise<boolean>;
    unpin(business_connection_id: string): Promise<boolean>;
    edit(payload: MessageEditPayload): Promise<Message | boolean>;
    editCaption(payload: MessagecaptionEditPayload): Promise<Message | boolean>;
    editMedia(payload: MessageMediaEditPayload): Promise<Message | boolean>;
    editReplyMarkup(payload: MessageReplyMarkupEditPayload): Promise<Message | boolean>;
    setReaction(reaction: Reactions, is_big?: boolean): Promise<boolean>;
    get command(): boolean;
    get topic(): Topic | undefined;
    get member(): Message | undefined;
    get manager(): MessagesManager;
    get chat(): Chat;
    get sender_chat(): Chat;
    get user(): User;
    get epoch(): string;
    get id(): number;
}
//# sourceMappingURL=Message.d.ts.map